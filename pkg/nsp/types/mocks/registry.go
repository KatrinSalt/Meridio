// Code generated by MockGen. DO NOT EDIT.
// Source: registry.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/nordix/meridio/api/nsp/v1"
	types "github.com/nordix/meridio/pkg/nsp/types"
)

// MockTargetRegistry is a mock of TargetRegistry interface.
type MockTargetRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockTargetRegistryMockRecorder
}

// MockTargetRegistryMockRecorder is the mock recorder for MockTargetRegistry.
type MockTargetRegistryMockRecorder struct {
	mock *MockTargetRegistry
}

// NewMockTargetRegistry creates a new mock instance.
func NewMockTargetRegistry(ctrl *gomock.Controller) *MockTargetRegistry {
	mock := &MockTargetRegistry{ctrl: ctrl}
	mock.recorder = &MockTargetRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTargetRegistry) EXPECT() *MockTargetRegistryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockTargetRegistry) Get(arg0 context.Context, arg1 *v1.Target) ([]*v1.Target, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].([]*v1.Target)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTargetRegistryMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTargetRegistry)(nil).Get), arg0, arg1)
}

// Remove mocks base method.
func (m *MockTargetRegistry) Remove(arg0 context.Context, arg1 *v1.Target) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockTargetRegistryMockRecorder) Remove(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockTargetRegistry)(nil).Remove), arg0, arg1)
}

// Set mocks base method.
func (m *MockTargetRegistry) Set(arg0 context.Context, arg1 *v1.Target) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockTargetRegistryMockRecorder) Set(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockTargetRegistry)(nil).Set), arg0, arg1)
}

// Watch mocks base method.
func (m *MockTargetRegistry) Watch(arg0 context.Context, arg1 *v1.Target) (types.TargetWatcher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", arg0, arg1)
	ret0, _ := ret[0].(types.TargetWatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockTargetRegistryMockRecorder) Watch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockTargetRegistry)(nil).Watch), arg0, arg1)
}

// MockTargetWatcher is a mock of TargetWatcher interface.
type MockTargetWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockTargetWatcherMockRecorder
}

// MockTargetWatcherMockRecorder is the mock recorder for MockTargetWatcher.
type MockTargetWatcherMockRecorder struct {
	mock *MockTargetWatcher
}

// NewMockTargetWatcher creates a new mock instance.
func NewMockTargetWatcher(ctrl *gomock.Controller) *MockTargetWatcher {
	mock := &MockTargetWatcher{ctrl: ctrl}
	mock.recorder = &MockTargetWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTargetWatcher) EXPECT() *MockTargetWatcherMockRecorder {
	return m.recorder
}

// ResultChan mocks base method.
func (m *MockTargetWatcher) ResultChan() <-chan []*v1.Target {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResultChan")
	ret0, _ := ret[0].(<-chan []*v1.Target)
	return ret0
}

// ResultChan indicates an expected call of ResultChan.
func (mr *MockTargetWatcherMockRecorder) ResultChan() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResultChan", reflect.TypeOf((*MockTargetWatcher)(nil).ResultChan))
}

// Stop mocks base method.
func (m *MockTargetWatcher) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockTargetWatcherMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockTargetWatcher)(nil).Stop))
}
