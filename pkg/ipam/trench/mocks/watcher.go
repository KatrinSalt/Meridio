// Code generated by MockGen. DO NOT EDIT.
// Source: watcher.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/nordix/meridio/pkg/ipam/types"
)

// MockTrenchWatcher is a mock of TrenchWatcher interface.
type MockTrenchWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockTrenchWatcherMockRecorder
}

// MockTrenchWatcherMockRecorder is the mock recorder for MockTrenchWatcher.
type MockTrenchWatcherMockRecorder struct {
	mock *MockTrenchWatcher
}

// NewMockTrenchWatcher creates a new mock instance.
func NewMockTrenchWatcher(ctrl *gomock.Controller) *MockTrenchWatcher {
	mock := &MockTrenchWatcher{ctrl: ctrl}
	mock.recorder = &MockTrenchWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrenchWatcher) EXPECT() *MockTrenchWatcherMockRecorder {
	return m.recorder
}

// AddConduit mocks base method.
func (m *MockTrenchWatcher) AddConduit(ctx context.Context, name string) (types.Conduit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddConduit", ctx, name)
	ret0, _ := ret[0].(types.Conduit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddConduit indicates an expected call of AddConduit.
func (mr *MockTrenchWatcherMockRecorder) AddConduit(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddConduit", reflect.TypeOf((*MockTrenchWatcher)(nil).AddConduit), ctx, name)
}

// RemoveConduit mocks base method.
func (m *MockTrenchWatcher) RemoveConduit(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveConduit", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveConduit indicates an expected call of RemoveConduit.
func (mr *MockTrenchWatcherMockRecorder) RemoveConduit(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveConduit", reflect.TypeOf((*MockTrenchWatcher)(nil).RemoveConduit), ctx, name)
}
