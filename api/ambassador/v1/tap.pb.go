//
//Copyright (c) 2021-2022 Nordix Foundation
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.15.8
// source: api/ambassador/v1/tap.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StreamStatus_Status int32

const (
	// Stream is open and ready to carry traffic
	StreamStatus_OPEN StreamStatus_Status = 0
	// The stream is requested open, but a stable status is not known yet due to a lengthy transition
	StreamStatus_PENDING StreamStatus_Status = 1
	// Stream is not reachable (NSP unreachable, under upgrade, failed etc.)
	StreamStatus_UNAVAILABLE StreamStatus_Status = 2
	// The stream is requested open, but it is not defined on the Meridio side
	StreamStatus_UNDEFINED StreamStatus_Status = 3
)

// Enum value maps for StreamStatus_Status.
var (
	StreamStatus_Status_name = map[int32]string{
		0: "OPEN",
		1: "PENDING",
		2: "UNAVAILABLE",
		3: "UNDEFINED",
	}
	StreamStatus_Status_value = map[string]int32{
		"OPEN":        0,
		"PENDING":     1,
		"UNAVAILABLE": 2,
		"UNDEFINED":   3,
	}
)

func (x StreamStatus_Status) Enum() *StreamStatus_Status {
	p := new(StreamStatus_Status)
	*p = x
	return p
}

func (x StreamStatus_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamStatus_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_api_ambassador_v1_tap_proto_enumTypes[0].Descriptor()
}

func (StreamStatus_Status) Type() protoreflect.EnumType {
	return &file_api_ambassador_v1_tap_proto_enumTypes[0]
}

func (x StreamStatus_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamStatus_Status.Descriptor instead.
func (StreamStatus_Status) EnumDescriptor() ([]byte, []int) {
	return file_api_ambassador_v1_tap_proto_rawDescGZIP(), []int{1, 0}
}

type StreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamStatus []*StreamStatus `protobuf:"bytes,1,rep,name=streamStatus,proto3" json:"streamStatus,omitempty"`
}

func (x *StreamResponse) Reset() {
	*x = StreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_ambassador_v1_tap_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamResponse) ProtoMessage() {}

func (x *StreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_ambassador_v1_tap_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamResponse.ProtoReflect.Descriptor instead.
func (*StreamResponse) Descriptor() ([]byte, []int) {
	return file_api_ambassador_v1_tap_proto_rawDescGZIP(), []int{0}
}

func (x *StreamResponse) GetStreamStatus() []*StreamStatus {
	if x != nil {
		return x.StreamStatus
	}
	return nil
}

type StreamStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status StreamStatus_Status `protobuf:"varint,1,opt,name=status,proto3,enum=ambassador.v1.StreamStatus_Status" json:"status,omitempty"`
	Stream *Stream             `protobuf:"bytes,2,opt,name=stream,proto3" json:"stream,omitempty"`
}

func (x *StreamStatus) Reset() {
	*x = StreamStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_ambassador_v1_tap_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamStatus) ProtoMessage() {}

func (x *StreamStatus) ProtoReflect() protoreflect.Message {
	mi := &file_api_ambassador_v1_tap_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamStatus.ProtoReflect.Descriptor instead.
func (*StreamStatus) Descriptor() ([]byte, []int) {
	return file_api_ambassador_v1_tap_proto_rawDescGZIP(), []int{1}
}

func (x *StreamStatus) GetStatus() StreamStatus_Status {
	if x != nil {
		return x.Status
	}
	return StreamStatus_OPEN
}

func (x *StreamStatus) GetStream() *Stream {
	if x != nil {
		return x.Stream
	}
	return nil
}

type Trench struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the trench
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Trench) Reset() {
	*x = Trench{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_ambassador_v1_tap_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trench) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trench) ProtoMessage() {}

func (x *Trench) ProtoReflect() protoreflect.Message {
	mi := &file_api_ambassador_v1_tap_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trench.ProtoReflect.Descriptor instead.
func (*Trench) Descriptor() ([]byte, []int) {
	return file_api_ambassador_v1_tap_proto_rawDescGZIP(), []int{2}
}

func (x *Trench) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Conduit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the conduit
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Trench the conduit belongs to
	Trench *Trench `protobuf:"bytes,2,opt,name=trench,proto3" json:"trench,omitempty"`
}

func (x *Conduit) Reset() {
	*x = Conduit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_ambassador_v1_tap_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conduit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conduit) ProtoMessage() {}

func (x *Conduit) ProtoReflect() protoreflect.Message {
	mi := &file_api_ambassador_v1_tap_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conduit.ProtoReflect.Descriptor instead.
func (*Conduit) Descriptor() ([]byte, []int) {
	return file_api_ambassador_v1_tap_proto_rawDescGZIP(), []int{3}
}

func (x *Conduit) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Conduit) GetTrench() *Trench {
	if x != nil {
		return x.Trench
	}
	return nil
}

type Stream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the stream
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Conduit the stream belongs to
	Conduit *Conduit `protobuf:"bytes,2,opt,name=conduit,proto3" json:"conduit,omitempty"`
}

func (x *Stream) Reset() {
	*x = Stream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_ambassador_v1_tap_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stream) ProtoMessage() {}

func (x *Stream) ProtoReflect() protoreflect.Message {
	mi := &file_api_ambassador_v1_tap_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stream.ProtoReflect.Descriptor instead.
func (*Stream) Descriptor() ([]byte, []int) {
	return file_api_ambassador_v1_tap_proto_rawDescGZIP(), []int{4}
}

func (x *Stream) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Stream) GetConduit() *Conduit {
	if x != nil {
		return x.Conduit
	}
	return nil
}

var File_api_ambassador_v1_tap_proto protoreflect.FileDescriptor

var file_api_ambassador_v1_tap_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6d, 0x62, 0x61, 0x73, 0x73, 0x61, 0x64, 0x6f, 0x72,
	0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x61,
	0x6d, 0x62, 0x61, 0x73, 0x73, 0x61, 0x64, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x51, 0x0a, 0x0e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x6d, 0x62, 0x61, 0x73, 0x73, 0x61, 0x64, 0x6f, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xba, 0x01, 0x0a,
	0x0c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e,
	0x61, 0x6d, 0x62, 0x61, 0x73, 0x73, 0x61, 0x64, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x6d, 0x62, 0x61,
	0x73, 0x73, 0x61, 0x64, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x22, 0x3f, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x08, 0x0a, 0x04, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x41,
	0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e,
	0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x03, 0x22, 0x1c, 0x0a, 0x06, 0x54, 0x72, 0x65,
	0x6e, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4c, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x64, 0x75,
	0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x74, 0x72, 0x65, 0x6e, 0x63, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x6d, 0x62, 0x61, 0x73, 0x73, 0x61,
	0x64, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x65, 0x6e, 0x63, 0x68, 0x52, 0x06, 0x74,
	0x72, 0x65, 0x6e, 0x63, 0x68, 0x22, 0x4e, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x64, 0x75, 0x69, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x6d, 0x62, 0x61, 0x73, 0x73, 0x61, 0x64, 0x6f,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x75, 0x69, 0x74, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x64, 0x75, 0x69, 0x74, 0x32, 0xbb, 0x01, 0x0a, 0x03, 0x54, 0x61, 0x70, 0x12, 0x37, 0x0a,
	0x04, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x15, 0x2e, 0x61, 0x6d, 0x62, 0x61, 0x73, 0x73, 0x61, 0x64,
	0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x05, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12,
	0x15, 0x2e, 0x61, 0x6d, 0x62, 0x61, 0x73, 0x73, 0x61, 0x64, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x41, 0x0a, 0x05, 0x57, 0x61, 0x74, 0x63, 0x68, 0x12, 0x15, 0x2e, 0x61, 0x6d, 0x62, 0x61,
	0x73, 0x73, 0x61, 0x64, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x1a, 0x1d, 0x2e, 0x61, 0x6d, 0x62, 0x61, 0x73, 0x73, 0x61, 0x64, 0x6f, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x30, 0x01, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x6e, 0x6f, 0x72, 0x64, 0x69, 0x78, 0x2f, 0x6d, 0x65, 0x72, 0x69, 0x64, 0x69, 0x6f,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6d, 0x62, 0x61, 0x73, 0x73, 0x61, 0x64, 0x6f, 0x72, 0x2f,
	0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_ambassador_v1_tap_proto_rawDescOnce sync.Once
	file_api_ambassador_v1_tap_proto_rawDescData = file_api_ambassador_v1_tap_proto_rawDesc
)

func file_api_ambassador_v1_tap_proto_rawDescGZIP() []byte {
	file_api_ambassador_v1_tap_proto_rawDescOnce.Do(func() {
		file_api_ambassador_v1_tap_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_ambassador_v1_tap_proto_rawDescData)
	})
	return file_api_ambassador_v1_tap_proto_rawDescData
}

var file_api_ambassador_v1_tap_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_ambassador_v1_tap_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_api_ambassador_v1_tap_proto_goTypes = []interface{}{
	(StreamStatus_Status)(0), // 0: ambassador.v1.StreamStatus.Status
	(*StreamResponse)(nil),   // 1: ambassador.v1.StreamResponse
	(*StreamStatus)(nil),     // 2: ambassador.v1.StreamStatus
	(*Trench)(nil),           // 3: ambassador.v1.Trench
	(*Conduit)(nil),          // 4: ambassador.v1.Conduit
	(*Stream)(nil),           // 5: ambassador.v1.Stream
	(*emptypb.Empty)(nil),    // 6: google.protobuf.Empty
}
var file_api_ambassador_v1_tap_proto_depIdxs = []int32{
	2, // 0: ambassador.v1.StreamResponse.streamStatus:type_name -> ambassador.v1.StreamStatus
	0, // 1: ambassador.v1.StreamStatus.status:type_name -> ambassador.v1.StreamStatus.Status
	5, // 2: ambassador.v1.StreamStatus.stream:type_name -> ambassador.v1.Stream
	3, // 3: ambassador.v1.Conduit.trench:type_name -> ambassador.v1.Trench
	4, // 4: ambassador.v1.Stream.conduit:type_name -> ambassador.v1.Conduit
	5, // 5: ambassador.v1.Tap.Open:input_type -> ambassador.v1.Stream
	5, // 6: ambassador.v1.Tap.Close:input_type -> ambassador.v1.Stream
	5, // 7: ambassador.v1.Tap.Watch:input_type -> ambassador.v1.Stream
	6, // 8: ambassador.v1.Tap.Open:output_type -> google.protobuf.Empty
	6, // 9: ambassador.v1.Tap.Close:output_type -> google.protobuf.Empty
	1, // 10: ambassador.v1.Tap.Watch:output_type -> ambassador.v1.StreamResponse
	8, // [8:11] is the sub-list for method output_type
	5, // [5:8] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_api_ambassador_v1_tap_proto_init() }
func file_api_ambassador_v1_tap_proto_init() {
	if File_api_ambassador_v1_tap_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_ambassador_v1_tap_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_ambassador_v1_tap_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_ambassador_v1_tap_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trench); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_ambassador_v1_tap_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conduit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_ambassador_v1_tap_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_ambassador_v1_tap_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_ambassador_v1_tap_proto_goTypes,
		DependencyIndexes: file_api_ambassador_v1_tap_proto_depIdxs,
		EnumInfos:         file_api_ambassador_v1_tap_proto_enumTypes,
		MessageInfos:      file_api_ambassador_v1_tap_proto_msgTypes,
	}.Build()
	File_api_ambassador_v1_tap_proto = out.File
	file_api_ambassador_v1_tap_proto_rawDesc = nil
	file_api_ambassador_v1_tap_proto_goTypes = nil
	file_api_ambassador_v1_tap_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TapClient is the client API for Tap service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TapClient interface {
	// Open a stream registers the target to the NSP,
	// If the trench or conduit is not connected to the target, then it will
	// be connected automatically before registering the target to the NSP.
	// If any property is not defined (empty name, nil trench/conduit...),
	// or, if another trench is already connected, an error will be returned.
	Open(ctx context.Context, in *Stream, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Close a stream unregisters the target from the NSP, disconnects
	// the target from the conduit if no more stream is connected to it,
	// and disconnects from the trench if no more conduit is connected to it.
	// If any property is not defined (empty name, nil trench/conduit...),
	// an error will be returned.
	Close(ctx context.Context, in *Stream, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// WatchStream will return a list of stream status containing
	// the same properties as the one in parameter (nil properties
	// will be ignored). On any event (any stream created/deleted/updated)
	// the list will be sent again.
	Watch(ctx context.Context, in *Stream, opts ...grpc.CallOption) (Tap_WatchClient, error)
}

type tapClient struct {
	cc grpc.ClientConnInterface
}

func NewTapClient(cc grpc.ClientConnInterface) TapClient {
	return &tapClient{cc}
}

func (c *tapClient) Open(ctx context.Context, in *Stream, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ambassador.v1.Tap/Open", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapClient) Close(ctx context.Context, in *Stream, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ambassador.v1.Tap/Close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapClient) Watch(ctx context.Context, in *Stream, opts ...grpc.CallOption) (Tap_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Tap_serviceDesc.Streams[0], "/ambassador.v1.Tap/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &tapWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Tap_WatchClient interface {
	Recv() (*StreamResponse, error)
	grpc.ClientStream
}

type tapWatchClient struct {
	grpc.ClientStream
}

func (x *tapWatchClient) Recv() (*StreamResponse, error) {
	m := new(StreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TapServer is the server API for Tap service.
type TapServer interface {
	// Open a stream registers the target to the NSP,
	// If the trench or conduit is not connected to the target, then it will
	// be connected automatically before registering the target to the NSP.
	// If any property is not defined (empty name, nil trench/conduit...),
	// or, if another trench is already connected, an error will be returned.
	Open(context.Context, *Stream) (*emptypb.Empty, error)
	// Close a stream unregisters the target from the NSP, disconnects
	// the target from the conduit if no more stream is connected to it,
	// and disconnects from the trench if no more conduit is connected to it.
	// If any property is not defined (empty name, nil trench/conduit...),
	// an error will be returned.
	Close(context.Context, *Stream) (*emptypb.Empty, error)
	// WatchStream will return a list of stream status containing
	// the same properties as the one in parameter (nil properties
	// will be ignored). On any event (any stream created/deleted/updated)
	// the list will be sent again.
	Watch(*Stream, Tap_WatchServer) error
}

// UnimplementedTapServer can be embedded to have forward compatible implementations.
type UnimplementedTapServer struct {
}

func (*UnimplementedTapServer) Open(context.Context, *Stream) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Open not implemented")
}
func (*UnimplementedTapServer) Close(context.Context, *Stream) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (*UnimplementedTapServer) Watch(*Stream, Tap_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}

func RegisterTapServer(s *grpc.Server, srv TapServer) {
	s.RegisterService(&_Tap_serviceDesc, srv)
}

func _Tap_Open_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Stream)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapServer).Open(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ambassador.v1.Tap/Open",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapServer).Open(ctx, req.(*Stream))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tap_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Stream)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ambassador.v1.Tap/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapServer).Close(ctx, req.(*Stream))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tap_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Stream)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TapServer).Watch(m, &tapWatchServer{stream})
}

type Tap_WatchServer interface {
	Send(*StreamResponse) error
	grpc.ServerStream
}

type tapWatchServer struct {
	grpc.ServerStream
}

func (x *tapWatchServer) Send(m *StreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Tap_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ambassador.v1.Tap",
	HandlerType: (*TapServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Open",
			Handler:    _Tap_Open_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _Tap_Close_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _Tap_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/ambassador/v1/tap.proto",
}
