// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	networkservice "github.com/networkservicemesh/api/pkg/api/networkservice"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockNetworkServiceClient is a mock of NetworkServiceClient interface.
type MockNetworkServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkServiceClientMockRecorder
}

// MockNetworkServiceClientMockRecorder is the mock recorder for MockNetworkServiceClient.
type MockNetworkServiceClientMockRecorder struct {
	mock *MockNetworkServiceClient
}

// NewMockNetworkServiceClient creates a new mock instance.
func NewMockNetworkServiceClient(ctrl *gomock.Controller) *MockNetworkServiceClient {
	mock := &MockNetworkServiceClient{ctrl: ctrl}
	mock.recorder = &MockNetworkServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkServiceClient) EXPECT() *MockNetworkServiceClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockNetworkServiceClient) Close(ctx context.Context, in *networkservice.Connection, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Close", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Close indicates an expected call of Close.
func (mr *MockNetworkServiceClientMockRecorder) Close(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockNetworkServiceClient)(nil).Close), varargs...)
}

// Request mocks base method.
func (m *MockNetworkServiceClient) Request(ctx context.Context, in *networkservice.NetworkServiceRequest, opts ...grpc.CallOption) (*networkservice.Connection, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Request", varargs...)
	ret0, _ := ret[0].(*networkservice.Connection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Request indicates an expected call of Request.
func (mr *MockNetworkServiceClientMockRecorder) Request(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Request", reflect.TypeOf((*MockNetworkServiceClient)(nil).Request), varargs...)
}
