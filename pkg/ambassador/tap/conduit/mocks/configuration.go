// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/ambassador/tap/conduit/configuration.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockConfiguration is a mock of Configuration interface.
type MockConfiguration struct {
	ctrl     *gomock.Controller
	recorder *MockConfigurationMockRecorder
}

// MockConfigurationMockRecorder is the mock recorder for MockConfiguration.
type MockConfigurationMockRecorder struct {
	mock *MockConfiguration
}

// NewMockConfiguration creates a new mock instance.
func NewMockConfiguration(ctrl *gomock.Controller) *MockConfiguration {
	mock := &MockConfiguration{ctrl: ctrl}
	mock.recorder = &MockConfigurationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfiguration) EXPECT() *MockConfigurationMockRecorder {
	return m.recorder
}

// WatchVIPs mocks base method.
func (m *MockConfiguration) WatchVIPs(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WatchVIPs", ctx)
}

// WatchVIPs indicates an expected call of WatchVIPs.
func (mr *MockConfigurationMockRecorder) WatchVIPs(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchVIPs", reflect.TypeOf((*MockConfiguration)(nil).WatchVIPs), ctx)
}

// Mockwatcher is a mock of watcher interface.
type Mockwatcher struct {
	ctrl     *gomock.Controller
	recorder *MockwatcherMockRecorder
}

// MockwatcherMockRecorder is the mock recorder for Mockwatcher.
type MockwatcherMockRecorder struct {
	mock *Mockwatcher
}

// NewMockwatcher creates a new mock instance.
func NewMockwatcher(ctrl *gomock.Controller) *Mockwatcher {
	mock := &Mockwatcher{ctrl: ctrl}
	mock.recorder = &MockwatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockwatcher) EXPECT() *MockwatcherMockRecorder {
	return m.recorder
}

// SetVIPs mocks base method.
func (m *Mockwatcher) SetVIPs(arg0 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetVIPs", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetVIPs indicates an expected call of SetVIPs.
func (mr *MockwatcherMockRecorder) SetVIPs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVIPs", reflect.TypeOf((*Mockwatcher)(nil).SetVIPs), arg0)
}
