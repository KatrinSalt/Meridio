// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/ambassador/tap/conduit/types.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/nordix/meridio/api/ambassador/v1"
	v10 "github.com/nordix/meridio/api/nsp/v1"
	types "github.com/nordix/meridio/pkg/ambassador/tap/types"
)

// MockStreamFactory is a mock of StreamFactory interface.
type MockStreamFactory struct {
	ctrl     *gomock.Controller
	recorder *MockStreamFactoryMockRecorder
}

// MockStreamFactoryMockRecorder is the mock recorder for MockStreamFactory.
type MockStreamFactoryMockRecorder struct {
	mock *MockStreamFactory
}

// NewMockStreamFactory creates a new mock instance.
func NewMockStreamFactory(ctrl *gomock.Controller) *MockStreamFactory {
	mock := &MockStreamFactory{ctrl: ctrl}
	mock.recorder = &MockStreamFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamFactory) EXPECT() *MockStreamFactoryMockRecorder {
	return m.recorder
}

// New mocks base method.
func (m *MockStreamFactory) New(arg0 *v1.Stream) (types.Stream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", arg0)
	ret0, _ := ret[0].(types.Stream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// New indicates an expected call of New.
func (mr *MockStreamFactoryMockRecorder) New(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockStreamFactory)(nil).New), arg0)
}

// MockStreamManager is a mock of StreamManager interface.
type MockStreamManager struct {
	ctrl     *gomock.Controller
	recorder *MockStreamManagerMockRecorder
}

// MockStreamManagerMockRecorder is the mock recorder for MockStreamManager.
type MockStreamManagerMockRecorder struct {
	mock *MockStreamManager
}

// NewMockStreamManager creates a new mock instance.
func NewMockStreamManager(ctrl *gomock.Controller) *MockStreamManager {
	mock := &MockStreamManager{ctrl: ctrl}
	mock.recorder = &MockStreamManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamManager) EXPECT() *MockStreamManagerMockRecorder {
	return m.recorder
}

// AddStream mocks base method.
func (m *MockStreamManager) AddStream(strm *v1.Stream) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddStream", strm)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddStream indicates an expected call of AddStream.
func (mr *MockStreamManagerMockRecorder) AddStream(strm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStream", reflect.TypeOf((*MockStreamManager)(nil).AddStream), strm)
}

// GetStreams mocks base method.
func (m *MockStreamManager) GetStreams() []*v1.Stream {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStreams")
	ret0, _ := ret[0].([]*v1.Stream)
	return ret0
}

// GetStreams indicates an expected call of GetStreams.
func (mr *MockStreamManagerMockRecorder) GetStreams() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStreams", reflect.TypeOf((*MockStreamManager)(nil).GetStreams))
}

// RemoveStream mocks base method.
func (m *MockStreamManager) RemoveStream(arg0 context.Context, arg1 *v1.Stream) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveStream", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveStream indicates an expected call of RemoveStream.
func (mr *MockStreamManagerMockRecorder) RemoveStream(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveStream", reflect.TypeOf((*MockStreamManager)(nil).RemoveStream), arg0, arg1)
}

// Run mocks base method.
func (m *MockStreamManager) Run() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run")
}

// Run indicates an expected call of Run.
func (mr *MockStreamManagerMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockStreamManager)(nil).Run))
}

// SetStreams mocks base method.
func (m *MockStreamManager) SetStreams(arg0 []*v10.Stream) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStreams", arg0)
}

// SetStreams indicates an expected call of SetStreams.
func (mr *MockStreamManagerMockRecorder) SetStreams(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStreams", reflect.TypeOf((*MockStreamManager)(nil).SetStreams), arg0)
}

// Stop mocks base method.
func (m *MockStreamManager) Stop(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockStreamManagerMockRecorder) Stop(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockStreamManager)(nil).Stop), arg0)
}
