// Code generated by MockGen. DO NOT EDIT.
// Source: types.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/nordix/meridio/api/nsp/v1"
)

// MockConduit is a mock of Conduit interface.
type MockConduit struct {
	ctrl     *gomock.Controller
	recorder *MockConduitMockRecorder
}

// MockConduitMockRecorder is the mock recorder for MockConduit.
type MockConduitMockRecorder struct {
	mock *MockConduit
}

// NewMockConduit creates a new mock instance.
func NewMockConduit(ctrl *gomock.Controller) *MockConduit {
	mock := &MockConduit{ctrl: ctrl}
	mock.recorder = &MockConduitMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConduit) EXPECT() *MockConduitMockRecorder {
	return m.recorder
}

// GetIPs mocks base method.
func (m *MockConduit) GetIPs() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIPs")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetIPs indicates an expected call of GetIPs.
func (mr *MockConduitMockRecorder) GetIPs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIPs", reflect.TypeOf((*MockConduit)(nil).GetIPs))
}

// MockTargetRegistry is a mock of TargetRegistry interface.
type MockTargetRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockTargetRegistryMockRecorder
}

// MockTargetRegistryMockRecorder is the mock recorder for MockTargetRegistry.
type MockTargetRegistryMockRecorder struct {
	mock *MockTargetRegistry
}

// NewMockTargetRegistry creates a new mock instance.
func NewMockTargetRegistry(ctrl *gomock.Controller) *MockTargetRegistry {
	mock := &MockTargetRegistry{ctrl: ctrl}
	mock.recorder = &MockTargetRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTargetRegistry) EXPECT() *MockTargetRegistryMockRecorder {
	return m.recorder
}

// GetTargets mocks base method.
func (m *MockTargetRegistry) GetTargets(arg0 context.Context, arg1 *v1.Target) ([]*v1.Target, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTargets", arg0, arg1)
	ret0, _ := ret[0].([]*v1.Target)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTargets indicates an expected call of GetTargets.
func (mr *MockTargetRegistryMockRecorder) GetTargets(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTargets", reflect.TypeOf((*MockTargetRegistry)(nil).GetTargets), arg0, arg1)
}

// Register mocks base method.
func (m *MockTargetRegistry) Register(arg0 context.Context, arg1 *v1.Target) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockTargetRegistryMockRecorder) Register(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockTargetRegistry)(nil).Register), arg0, arg1)
}

// Unregister mocks base method.
func (m *MockTargetRegistry) Unregister(arg0 context.Context, arg1 *v1.Target) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unregister", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unregister indicates an expected call of Unregister.
func (mr *MockTargetRegistryMockRecorder) Unregister(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unregister", reflect.TypeOf((*MockTargetRegistry)(nil).Unregister), arg0, arg1)
}
